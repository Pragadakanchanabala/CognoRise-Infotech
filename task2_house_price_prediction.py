# -*- coding: utf-8 -*-
"""Task2-House Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zmVKhHFdG3yQI9P8OgJvAhLD_609jcYa

# **House Price Prediction**

About Dataset

---
Given a dataset with 4600 rows and 18 different independent features. The goal is to build a model that can predict the price of the houses based on these features.

    Date: Represents the date when the property information was recorded or made available.
    Bedrooms: Specifies the total number of bedrooms present in the house.Bathrooms: Indicates the total count of bathrooms available in the house, encompassing both full baths and half baths.
    Square Feet Living: Refers to the total living area of the house, measured in square feet.
    Square Feet Lot: Represents the size of the land or lot on which the house is built, typically measured in square feet.
    Floors: Denotes the number of floors or levels present in the house.Waterfront: Binary feature indicating whether the property has waterfront views or access (1 for waterfront, 0 for no waterfront).
    View: Describes the level of view from the property, ranging from 0 to 4 (0 being lowest and 4 being highest).
    Condition: Specifies the overall condition or state of the property, categorized from '1' (poor) to '5' (excellent).
    Square Feet Above: Represents the total area of the house above ground level, measured in square feet.
    Square Feet Basement: Indicates the size of the basement area, if applicable, measured in square feet.
    Year Built: Specifies the year in which the house was originally constructed.
    Year Renovated: Indicates the year when the house underwent renovation or significant upgrades, if any.
    Street: Provides the street address or location of the property.
    City: Specifies the city or locality where the property is situated.
    State/Ship: Represents the state or shipping information related to the property.
    Country: Denotes the country where the property is located.

Output:

Price: Denotes the sale price of the house, which serves as the target variable for prediction in regression analysis.

**Data Loading**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df=pd.read_csv('C:/Users/praga/Downloads/CognoRise-main/CognoRise-main/data.csv')
df

df.head()

df.tail()

df.shape

"""**Data Cleaning and Preprocessing Steps**"""

df.info()

for i in df:
  a=df[i].value_counts()
  print(a)
  print('-'*1000)

df.columns

df['date']=df['date'].str.replace('00:00:00','')
df['statezip']=df['statezip'].str.replace('WA','')
df.loc[df['price']==0.0,'price']=np.NaN
df.loc[df['bedrooms']==0.0,'price']=np.NaN
df.loc[df['bathrooms']==0.0,'bathrooms']=np.NaN
df.loc[df['sqft_basement']==0,'sqft_basement']=np.NaN
df.loc[df['yr_renovated']==0,'yr_renovated']=np.NaN

df.isna().sum()

(df.isna().sum()/df.shape[0])*100

df.drop(['sqft_basement','yr_renovated','country','street','date'],axis=1,inplace=True)

df['price']=df['price'].fillna(df['price'].median())
df['bathrooms']=df['bathrooms'].fillna(df['bathrooms'].median())
df.isna().sum()

df.dtypes

from sklearn.preprocessing import LabelEncoder
end=LabelEncoder()
df['city']=end.fit_transform(df['city'])

df['statezip']=df['statezip'].astype(float)
df.dtypes

for i in ['price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot',
         'condition', 'sqft_above','statezip']:
  sns.boxplot(x=i,data=df)
  plt.show()

#Outlier Treatment
def wisker(col):
  q1=col.quantile(0.25)
  q3=col.quantile(0.75)
  IQR=q3-q1
  LW=q1-1.5*IQR  #lower wisker
  UW=q3+1.5*IQR  #upper wisker
  return LW,UW

for i in ['price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot',
         'condition', 'sqft_above','statezip']:
  LW,UW=wisker(df[i])
  df[i]=np.where(df[i]<LW,LW,df[i])
  df[i]=np.where(df[i]>UW,UW,df[i])

"""**Data Visualization**"""

df['view'].value_counts()
df['view'].plot(kind="hist")
plt.xticks([0,1,2,3,4])
plt.xlabel("Views")
plt.ylabel("Count")
plt.title("Distrubtion Of View");

df['city'].value_counts().sort_values().tail(10).plot(kind="bar")
plt.xlabel("City")
plt.ylabel("Count")

plt.figure(figsize=(10,7))
sns.heatmap(df.corr(),annot=True)

x=df.drop(['price'],axis=1)
x

y=df['price']
y

"""**Train Test Split**"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=42)
x_train

x_test

y_train

y_test

"""**Model Creation**"""

from sklearn.ensemble import RandomForestRegressor
model1=RandomForestRegressor(random_state=42)
from sklearn.linear_model import LinearRegression
model2=LinearRegression()
from sklearn.tree import DecisionTreeRegressor
model3=DecisionTreeRegressor(random_state=42)
from sklearn.metrics import mean_absolute_error,mean_absolute_percentage_error,mean_squared_error,r2_score
lst=[model1,model2,model3]

"""**Performance Analysis**"""

for i in lst:
  i.fit(x_train,y_train)
  print(i)
  y_pred=i.predict(x_test)
  print(y_pred)
  print('absolute percentage error=',mean_absolute_percentage_error(y_test,y_pred))
  print('score=',r2_score(y_test,y_pred))
  plt.scatter(y_test, y_pred)
  plt.xlabel("Actual Value")
  plt.ylabel("Predicted Value")
  plt.title("Actual Value vs Predicted Value")
  plt.show()
  print('-'*1000)
